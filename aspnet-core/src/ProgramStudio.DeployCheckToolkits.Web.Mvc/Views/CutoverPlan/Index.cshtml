@using ProgramStudio.DeployCheckToolkits.Web.Startup
@{
    ViewBag.CurrentPageName = PageNames.CutoverPlan;
}
@section styles{
    <link href="~/lib/webuploader-0.1.5/webuploader.css" rel="stylesheet" asp-append-version="true" />
}
@section scripts{
    <script src="~/lib/webuploader-0.1.5/webuploader.nolog.min.js" asp-append-version="true"></script>
    <script src="~/js/axios.min.js" asp-append-version="true"></script>
    <script src="~/js/vue.js" asp-append-version="true"></script>
    <script src="~/js/xlsx.core.min.js" asp-append-version="true"></script>
    <script type="text/javascript">
        var allowedFileExtensions = 'xls,xlsx';
        var msgTips = '';
        var msgProjectName = '';
        var msgSelectOneFile = '';
        var msgUploadFile = '';
        var msgWaitingForUpload = '';
        var msgUploading = '';
        var msgUploadCompleted = '';
        var msgSelectFileError = '';
        var msgNone = '';
        var msgSearchResultTips = '';
        function initMsg() {
            msgTips = $("#hdTips").val();
            msgProjectName = $("#hdSelectProjectName").val();
            msgSelectOneFile = $("#hdSelectOneFile").val();
            msgUploadFile = $("#hdUploadFile").val();
            msgWaitingForUpload = $("#hdWaitingForUpload").val();
            msgUploading = $("#hdUploading").val();
            msgUploadCompleted = $("#hdUploadCompleted").val();
            msgSelectFileError = $("#hdSelectFileError").val();
            msgNone = $("#hdNone").val();
            msgSearchResultTips = $("#hdSearchResultTips").val();
        }
        function viewHistory() {
            window.location.href = abp.appPath + "CutoverPlan/History";
        }
        var serverFileName = "";
        var oldFile = null;
        var uploader = null;
        function addFileQueueText(file, message) {
            oldFile = file;
            let $list = $("#thelist");
            $list.append('<div id="' + file.id + '" class="item">' +
                '<h4 class="info">' + file.name + '</h4>' +
                '<p class="state">' + message + '...</p>' +
                '</div>');
        }
        function readExcelFile(file) {
            debugger
            let data = [];
            let workbook;
            let fileReader = new FileReader();
            fileReader.onload = function (ev) {
                try {
                    let data = ev.target.result
                    workbook = XLSX.read(data, { type: 'binary' });
                } catch (e) {
                    return;
                }
                const sheet2JSONOpts = {
                    /** Default value for null/undefined values */
                    header: "A",
                    defval: '',
                    raw: false
                }
                // 表格的表格范围，可用于判断表头是否数量是否正确
                // 遍历每张表读取
                for (let sheet in workbook.Sheets) {
                    if (workbook.Sheets.hasOwnProperty(sheet)) {
                        let sheetJson = XLSX.utils.sheet_to_json(workbook.Sheets[sheet], sheet2JSONOpts);
                        data = data.concat(sheetJson);
                        break;
                    }
                }
                app.data = [];
                app.dataHeader = {};
                app.dataRows = [];
                if (data.length > 0) {
                    app.dataHeader = data[0];
                }
                for (let idx in data) {
                    data[idx]["RN"] = parseInt(idx);
                    app.data.push(data[idx]);
                    if (parseInt(idx) == 0) {
                        continue;
                    }
                    app.dataRows.push(data[idx]);
                }
            };
            fileReader.readAsBinaryString(file);
        }
        function createUploader(callback) {
            uploader = WebUploader.create({
                swf: abp.appPath + 'lib/webuploader-0.1.5/Uploader.swf',
                server: '/CutoverPlan/Uploader',
                pick: { id: '#picker', multiple: false },
                fileNumLimit: 1,
                duplicate: true,
                resize: false,
                auto: true, /*sendAsBinary: true,*/
                fileSingleSizeLimit: 50 * 1024 * 1024/*MB*/
            });
            uploader.on('beforeFileQueued', function (file) {
                if ($.inArray(file.ext.toLowerCase(), allowedFileExtensions.split(",")) == -1) {
                    abp.message.warn(msgSelectFileError, msgTips);
                    return false;
                }
                if (oldFile) {
                    $("#thelist").children("#" + oldFile.id).remove();
                    uploader.removeFile(oldFile);
                    serverFileName = "";
                    oldFile = null;
                }
            });
            uploader.on('fileQueued', function (file) {
                oldFile = file;
                let $list = $("#thelist");
                $list.append('<div id="' + file.id + '" class="item">' +
                    '<h4 class="info">' + file.name + '</h4>' +
                    '<p class="state">' + msgWaitingForUpload + '...</p>' +
                    '</div>');
            });
            uploader.on('uploadProgress', function (file, percentage) {
                let $li = $('#' + file.id),
                    $percent = $li.find('.progress .progress-bar');
                if (!$percent.length) {
                    $percent = $('<div class="progress progress-striped active">' +
                        '<div class="progress-bar" role="progressbar" style="width: 0%">' +
                        '</div>' +
                        '</div>').appendTo($li).find('.progress-bar');
                }
                $li.find('p.state').text(msgUploading);
                $percent.css('width', percentage * 100 + '%');
            });
            uploader.on('uploadComplete', function (file) {
                let $li = $('#' + file.id);
                $('#' + file.id).find('.progress').fadeOut();
                $li.find('p.state').text(msgUploadCompleted);
            });
            uploader.on('uploadSuccess', function (file, response) {
                serverFileName = response.result;
                callback();
            });
            uploader.on('uploadAccept', function (object, response) {
            });
            uploader.on('uploadError', function (file, reason) {
            });
            uploader.on("error", function (type) {
            });
            uploader.on('uploadFinished', function () {
                /*没有文件上传也会运行到此*/
            });
        }
        Vue.filter('dateFormat', function (value, format) {
            return moment(value).format(format);
        });
        var app = new Vue({
            el: '#app',
            data: {
                data: [],
                dataHeader: {},
                dataRows: [],
                projectName: msgProjectName,
                projectNames: [],
                dataResult: [],
                searchResult: [],
                fileName: "",
                searchResultTipsCache: "",
                searchResultTips: ""
            },
            watch: {
            },
            computed: {
            },
            updated: function () {
            },
            mounted() {
                initMsg();
                this.projectName = msgProjectName;
                this.searchResultTipsCache = msgSearchResultTips;
                axios.get(`${abp.appPath}CutoverPlan/Configuration`)
                    .then(response => {
                        let result = response.data.result;
                        try {
                            this.projectNames = [msgProjectName].concat(result);
                        } catch (e) {
                            console.log(e, response);
                        }
                    });
                createUploader(this.clearResult);
                let thisCheckDataOk = this.checkDataOk;
                let thisSubmitData = this.submitData;
                $("#ctlBtn").on("click", function () {
                    if (thisCheckDataOk()) {
                        if (oldFile != null && serverFileName != "") {
                            thisSubmitData();
                        } else {
                            abp.message.warn(msgSelectOneFile, msgTips);
                        }
                    }
                });
                $('#ViewHistory').click(function () {
                    viewHistory();
                });
                $('#ProjectInfo').click(function () {
                    window.location.href = abp.appPath + "BaseData";
                });
            },
            methods: {
                clearResult() {
                    this.dataResult = [];
                    this.searchResultTips = "";
                    this.searchResult = [];
                },
                submitData() {
                    let formData = new FormData();
                    formData.append("projectName", this.projectName);
                    formData.append("fileName", serverFileName);
                    let contentHeader = {
                        headers: { 'content-type': 'application/x-www-form-urlencoded' }
                    }
                    this.dataResult = [];
                    abp.ui.setBusy("#app");
                    axios.post(`${abp.appPath}CutoverPlan/Check`, formData, contentHeader)
                        .then(response => {
                            try {
                                let result = response.data.result.dataResult;
                                this.dataResult = result;
                                this.searchResult = response.data.result.messages;
                            } catch (e) {
                                console.log(e, response);
                            }
                        }).catch(function (error) {
                            try {
                                if (error.response && error.response.data) {
                                    abp.message.warn(error.response.data.result, msgTips);
                                }
                            } catch (e) {
                                console.log(e);
                            }
                        }).finally(function () {
                            abp.ui.clearBusy('#app');
                        });
                },
                checkDataOk() {
                    if (this.projectName == msgProjectName) {
                        abp.message.warn(msgProjectName, msgTips);
                        return false;
                    }
                    return true;
                },
                selectProject(e) {
                    this.projectName = e.target.innerText;
                }
            }
        });
    </script>
}
<div id="app" class="row clearfix">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <div class="card">
            <div class="header">
                <h2>
                    @L("CutoverPlan")
                    <input id="hdTips" type="hidden" value="@L("Tips")" />
                    <input id="hdSelectProjectName" type="hidden" value="@L("SelectProjectName")" />
                    <input id="hdSelectOneFile" type="hidden" value="@L("SelectOneFile")" />
                    <input id="hdWaitingForUpload" type="hidden" value="@L("WaitingForUpload")" />
                    <input id="hdUploading" type="hidden" value="@L("Uploading")" />
                    <input id="hdUploadCompleted" type="hidden" value="@L("UploadCompleted")" />
                    <input id="hdSelectFileError" type="hidden" value="@L("SelectFileError")" />
                    <input id="hdNone" type="hidden" value="@L("None")" />
                    <input id="hdSearchResultTips" type="hidden" value="@L("SearchResultTips")" />
                </h2>
                <ul class="header-dropdown m-r--5">
                    <li class="dropdown">
                        <a href="javascript:void(0);" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                            <i class="material-icons">more_vert</i>
                        </a>
                        <ul class="dropdown-menu pull-right">
                            <li><a id="ViewHistory" href="javascript:void(0);" class="waves-effect waves-block"><i class="material-icons">history</i>@L("ViewHistory")</a></li>
                            <li><a id="ProjectInfo" href="javascript:void(0);" class="waves-effect waves-block"><i class="material-icons">arrow_forward</i>@L("ProjectInfo")</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
            <div class="body">
                <div class="container" style="width: auto !important;">
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12">
                            <div class="btn-group" role="group" aria-label="...">
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-default dropdown-toggle" style="min-width: 150px;" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        {{this.projectName}}
                                        <span class="caret"></span>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li v-for="currentTemp in projectNames"><a href="#" @@click="selectProject">{{currentTemp}}</a></li>
                                    </ul>
                                </div>
                                <button id="picker" class="btn btn-default" style="min-width: 150px;">
                                    <span class="glyphicon glyphicon-th-list"></span>
                                    @L("UploadFile")
                                </button>
                                <button id="ctlBtn" class="btn btn-primary" style="min-width: 150px;">
                                    <span class="glyphicon glyphicon-ok"></span>
                                    @L("StartCheck")
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12">
                            <div id="thelist" class="uploader-list"></div>
                        </div>
                    </div>
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            @*<th></th>*@
                        <th>@L("DeployItemName")</th>
                        <th>@L("DeployVersion")</th>
                        <th>@L("RollbackVersion")</th>
                        <th>@L("LastHistoryVersion")</th>
                        <th>@L("LastCheckTime")</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="rowItem in dataResult">
                            @*<td>{{rowItem.rowNo}}</td>*@
                            <td>{{rowItem.deployItemName}}</td>
                            <td>{{rowItem.deployVersion}}</td>
                            <td>{{rowItem.rollbackVersion}}</td>
                            <td>{{rowItem.lastVersion}}</td>
                            <td>{{rowItem.creationTime | dateFormat('YYYY-MM-DD HH:mm:ss')}}</td>
                        </tr>
                    </tbody>
                </table>
                <table class="table">
                    <thead>
                        <tr>
                            <th>@L("CheckResults")<span style="font-weight: normal;">{{searchResultTips}}</span></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="dataTemp in searchResult">
                            <td>
                                {{dataTemp}}
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
